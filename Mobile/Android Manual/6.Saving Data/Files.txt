- It's a way to save a medium size of data.

- The file is a binary file so you cant see what's in it directly.

- You need to save the data of the file in a container (ex: ArrayList, List, etc..) which will put them in the RAM so you can edit them.

- Save data in a way that each line in the file represent 1 item of the data.

- You can read the data line_by_line or byte_by_byte (byte = char) or usding an array of fixed bytes.

- Always put your code in a try-catch close.

- Writing Data:

      try{

          String c = "1st line\n", s = "2nd line\n"; // always add \n for new data in order to use readline() function.
          FileOutputStream fileOutputStream = openFileOutput("file_name", MODE_PRIVATE);
          fileOutputStream.write(c.getBytes());
          fileOutputStream.write(s.getBytes());
          fileOutputStream.close(); // always clode when you finish.
          Toast.makeText(getBaseContext(), "file created/opened", Toast.LENGTH_SHORT).show();
      }
      catch(Exception e){ } 


- Reading Data:

      // Read the data in a container (ex: ArrayList) to edit the content of the file in case you want to do
      // something other than append to it (ex: delete/organioze/...etc)

      try{

          FileInputStream fileInputStream = openFileInput("file_name"); // open the file name file_name

          // 1st method - Using readline (line_by_line)

          InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
          BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
          String s;
          s = bufferedReader.readLine();
          s = s + "\n" + bufferedReader.readLine() + "\n" + bufferedReader.readLine();

          // 2nd method - Using an array of bytes

          int size  = fileInputStream.available();
          byte[] buffer = new byte[size];
          fileInputStream.read(buffer);
          String s = new String(buffer);

          // 3rd method - byte_by_byte

          int read = -1;
          StringBuffer buffer = new StringBuffer();
          while((read = fileInputStream.read()) != -1)
                   buffer.append((char)read);

          fileInputStream.close();
          Toast.makeText(getBaseContext(), s, Toast.LENGTH_LONG).show();
      }
      catch(Exception e){ }

- Append to file:

     try {

         // Mode_Append append new data to the end of the file

         FileOutputStream fileOutputStream = openFileOutput("file_name", MODE_APPEND);
         String s = " This is a string.\n";
         fileOutputStream.write(s.getBytes());
         fileOutputStream.close();
         Toast.makeText(getBaseContext(), "text added to file", Toast.LENGTH_SHORT).show();
     }
     catch(Exception e){ }

- Clear the file:

      try {

          // I used Mode_Private to overwrite the file and make it empty

          FileOutputStream fileOutputStream = openFileOutput("file_name", MODE_PRIVATE);
          fileOutputStream.close();
          Toast.makeText(getBaseContext(), "file is empty now", Toast.LENGTH_SHORT).show();
      }
      catch(Exception e){ }